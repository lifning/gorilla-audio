Gorilla Audio should run on most systems with a c11-conformant compiler.  (It
will also run with minimal modification on systems with only a c99 compiler;
contact me if this is something you need.)  Windows support is only cursory at
the moment--patches welcome!--but the library should work under mingw.

To compile, simply run 'make' (or 'make MODE=release' to build with
optimizations).  This will generate o/(debug|release)/libgorilla.{a,so} which
you can link into your projects as needed.  You may need to substitute 'gmake'
for 'make' on some systems, installing the former if necessary.

The build system is affected by various flags for which reasonable values are
automatically chosen, but which you can override.  To enable a flag, add
'FLAG=value' to your command line; for instance, 'make BUILD_STATIC=0'.
Flags:

Flag                    Description                     Default value

BUILD_STATIC            build a static library          1
BUILD_DYNAMIC           build a dynamic library         1

ENABLE_XAUDIO2          xaudio2 audio backend           1 iff windows
ENABLE_ARCAN            arcan audio backend             0
ENABLE_SNDIO            sndio audio backend             1 iff openbsd
ENABLE_PULSEAUDIO       pulseaudio audio backend        1 iff linux
ENABLE_ALSA             alsa audio backend              1 iff linux
ENABLE_OSS              oss audio backend               1 iff freebsd
ENABLE_OPENAL           openal audio backend            0

ENABLE_FLAC             support flac encoding           1
ENABLE_OPUS             support ogg opus                1
ENABLE_VORBIS           support ogg vorbis              1

MODE                    debug|release                   debug
ASAN                    instrument memory errors        0
TSAN                    instrument threading errors     0

You can also specify ENABLE_FLAC=2 or ENABLE_VORBIS=2 to use alternate decoders
(stb vorbis and dr flac).  (There is no alternate opus decoder yet.)  These
decoders are more permissively licensed (public domain) and smaller code-wise,
but less robust and less performant, so you probably do not want to use them.
(A decoder-free build is ~80k; a build using only alternate decoders is ~200k;
an opus-free build is ~500k; a full build is 1m.)
